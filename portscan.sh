#!/bin/bash

#Colors :) 
reset="\033[0m"
green="\033[92m"
red="\033[91m"
yellow="\033[93m"
normal="\033[0;39m"


# Help
if [ "$1" == "-h" ] || [ "$1" == "--help" ] ; then
  echo "Usage: ./scanner.sh"
  exit 0
fi

# Version
if [ "$1" == "-v" ] || [ "$1" == "--version" ] ; then
  echo "Port Scanner 9000 v1.0"
  exit 0
fi

#L
if [ $(id -u) != "0" ]; then
  echo "This script must be run with superuser privileges. Please use 'sudo' to continue."
  exit 0
fi

clear

# Take in Address and Ports :*}
while true; do
echo -n "Enter your domain: "
read domain
#domain="www.rit.edu"

#Empty domain
if [ -z "$domain" ]; then
	echo -e "$red Domain cannot be empty$reset"
	echo "Try again or type break to exit"
	continue
fi

if [ "$domain" == "break" ] || [ "$domain" == "Break" ]; then
	echo -e "$red GoodBye!"
	exit 1
fi

echo -e "$yellow Checking Domain$reset"
if nslookup "$domain" > /dev/null 2>&1 ; then
	echo -e "$green Domain is Valid $reset"
	break
else
	echo -e "$red Domain is Invalid $reset"
fi 
done


while true; do
echo -n "Enter a starting point between 0 and 1000: "
read start_port
#start_port=79

if [ "$start_port" == "break" ] || [ "$start_port" == "Break" ]; then
	echo -e "$red GoodBye!"
	exit 1
fi

# Validate starting ports :-)
if ! [[ "$start_port" =~ ^[0-9]+$ ]] || [ "$start_port" -lt 0 ] || [ "$start_port" -gt 1000 ]; then
  if ! [[ "$start_port" =~ ^[0-9]+$ ]]; then
    echo -e "$red Invalid input. Please enter a valid number.$reset"
	echo "Try again or type break to exit"
	continue
  else
    echo -e "$red Invalid starting point. Please enter a number between 0 and 1000.$reset"
	echo "Try again or type break to exit"
	continue
  fi
fi
break
done 

while true; do
echo -n "Enter an ending port between $start_port and 1000: "
read end_port
#end_port=81

if [ "$end_port" == "break" ] || [ "$end_port" == "Break" ]; then
	echo -e "$red GoodBye!"
	exit 1
fi

if ! [[ "$end_port" =~ ^[0-9]+$ ]] || [ $end_port -lt $start_port ] || [ "$end_port" -gt 1000 ]; then
  if ! [[ "$end_port" =~ ^[0-9]+$ ]]; then
    echo -e "$red Invalid input. Please enter a valid number.$reset"
	echo "Try again or type break to exit"
	continue
  else
    echo -e "$red Invalid ending point. Please enter a number between $start_port and 1000.$reset"
	echo "Try again or type break to exit"
	continue
  fi
fi
break
done 

# Scan ports :)
scan_text=$(sudo nmap -sT -p $start_port-$end_port $domain -oX /tmp/scan_text.xml )

#Checks Nmap error :(
if [ $? -ne 0 ]; then
	echo "Error running nmap scan: $scan_text"
	exit 1
fi

# Check if the XML file exists and is not empty :(
if [ ! -s /tmp/scan_text.xml ]; then
  echo "Error: nmap scan did not produce a valid XML output."
  exit 1
fi

# Check if xmllint is installed -- forgot :(
if ! command -v xmllint &> /dev/null; then
  echo "Error: xmllint is not installed. Please install xmllint to continue."
  exit 1
fi

# nmap -sS -p 1-65535 localhost
# if error, inform user ... ok


#Extracts hostname :(
hostname=$(xmllint --xpath "//hostname[@type='user']/@name" /tmp/scan_text.xml | cut -d'"' -f2 | sort -u)

#Empty or missing hostname :(
if [[ -z "$hostname" ]]; then
  hostname="Unknown"
fi

#Extract and display :>)
xmllint --xpath "//port" /tmp/scan_text.xml | while read -r line; do
      port=$(echo "$line" | xmllint --xpath "string(//@portid)" -)
      state=$(echo "$line" | xmllint --xpath "string(//state/@state)" -)
      
	if [[ -z "$port" || -z "$state" ]]; then
		echo "Error: Invalid port or state data in XML."
        continue
	fi

	if [[ "$state" == "open" ]]; then
        echo -e "$green$hostname Port $port: open$normal"
	elif [[ "$state" == "closed" ]]; then
        echo -e "$red$hostname Port $port: closed$normal"
    elif [[ "$state" == "filtered" ]]; then
        echo -e "$yellow$hostname Port $port: filtered$normal"
    else
		echo "Warning: Unrecognized state for Port $port."
	fi
done

#Clean :)
rm /tmp/scan_text.xml


exit
